@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Drawing
@inject IJSRuntime JsRuntime;

<div id="canvasHolder"  @onclick="@(async(e) => await OnClick(e))"> 
    <BECanvas  @ref="_canvasReference"></BECanvas>
    @XCord;
    @YCord;
</div>

@code{
    private Models.Field BallField = new Models.Field();

    private double XCord { get; set; } 
    private double YCord {get;set;} 


    private Canvas2DContext ctx;
    protected BECanvasComponent _canvasReference;       

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.ctx = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();
    }

    private bool Start {get;set;}
    private bool Clicked { get; set; } = false;
    protected override void OnInitialized()
    {
        Start = true;        
    }

    private async Task OnClick(MouseEventArgs args)
    {
        Clicked = true;

        string deleteMe = string.Empty;

        XCord = args.ClientX;
        YCord = args.ClientY;
               
        foreach (var item in BallField.Balls)
        { //ClientX = 250 
            if(item.X <= args.ClientX && item.X+100 >= args.ClientX)
            {
                if (item.X <= args.ClientY && item.X + 100 >= args.ClientY)
                {
                    deleteMe = item.Color;
                }
            }   
        }

        if(!string.IsNullOrEmpty(deleteMe)){
            BallField.Balls.RemoveAll(x =>
                {
                    if (x.Color == deleteMe)
                    {
                        Hit++;
                        return true;
                    }
                    return false;
                });
        }
    }

    [JSInvokable]
    public void ResizeInBlazor(double width, double height) => BallField.Resize(width, height);

    private int Generated { get; set; }
    private int Hit { get; set; }

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {
        if (Start){
            Generated = new Random().Next(1, 5);
            BallField.AddRandomBalls(Generated);
            Start = false;
        }

        BallField.StepForward();

        await this.ctx.BeginBatchAsync();        

        await this.ctx.ClearRectAsync(0, 0, BallField.Width, BallField.Height);
        await this.ctx.SetFillStyleAsync("#003366");
        await this.ctx.FillRectAsync(0, 0, BallField.Width, BallField.Height);

        await this.ctx.SetFontAsync("26px Segoe UI");
        await this.ctx.SetFillStyleAsync("#FFFFFF");
        await this.ctx.FillTextAsync($"Generated: {Generated} | Hit: {Hit}", 250, 30);

        await this.ctx.SetStrokeStyleAsync("#FFFFFF");
        foreach (var ball in BallField.Balls)
        {
            await this.ctx.SetFillStyleAsync(ball.Color);
            await this.ctx.FillRectAsync(ball.X, ball.Y, 100, 100);
        }

        await this.ctx.EndBatchAsync();
    }
}
